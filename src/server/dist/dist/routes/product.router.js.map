{"version":3,"file":"product.router.js","mappings":"sgBAAA;AACA,sF;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAARD,EAAf;;AAEAD,MAAM,CAACG,GAAPH,CAAW,OAAXA,qHAAoB,iBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;;YAEVC,EAFU,GAEHH,GAAG,CAACI,MAAJJ,CAAPG,GAFU;;;YAKZA,EALY;YAMdA,EAAE,GAAGE,QAAQ,CAACF,EAAD,CAAbA,CANc;;YAQVG,KAAK,CAACH,EAAD,CARK;YASRI,GATQ,GASF,IAAIC,KAAJ,CAAU,oCAAV,CAAND;YACJA,GAAG,CAACE,MAAJF,GAAa,GAAbA,CAVY;cAWNA,GAXM;;;cAcIG,QAAQ,CAACC,WAATD,CAAqBP,EAArBO,CAdJ,mIAcbE,OAda,4BAcbA,CAdaC;;cAgBEH,QAAQ,CAACI,OAATJ,EAhBF,UAgBdE,OAhBc,gBAgBdA,CAhBc;;;YAmBhBX,GAAG,CAACc,IAAJd,CAASW,OAAO,IAAI,EAAEI,GAAG,uCAAgCb,EAAhC,CAAL,EAApBF,EAnBgBY;;YAqBhBX,IAAI,aAAJA,CArBgB,yEAApB;;;;AAyBAN,MAAM,CAACqB,IAAPrB,CAAY,GAAZA,sHAAiB,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;;YAEPgB,IAFO,GAEElB,GAFF,CAEPkB,KAFOC;;cAIYT,QAAQ,CAACU,SAATV,CAAmBQ,IAAnBR,CAJZ,gDAIPW,QAJO,yBAIPA;YACNpB,GAAG,CAACc,IAAJd,CAAS;cACPE,EAAE,EAAEkB,QADG;cAEPL,GAAG,EAAE,4BAFE,EAATf,EALakB;;;YAUbjB,IAAI,cAAJA,CAVa,0EAAjB;;;;AAcAN,MAAM,CAAC0B,GAAP1B,CAAW,MAAXA,sHAAmB,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;;YAETgB,IAFS,GAEAlB,GAFA,CAETkB;YACFf,EAHW,GAGNE,QAAQ,CAACL,GAAG,CAACI,MAAJJ,CAAWG,EAAZ,CAAbA,CAHW;;YAKXG,KAAK,CAACH,EAAD,CALM;YAMTI,GANS,GAMH,IAAIC,KAAJ,CAAU,oCAAV,CAAND;YACJA,GAAG,CAACE,MAAJF,GAAa,GAAbA,CAPa;cAQPA,GARO;;cAUgBG,QAAQ,CAACa,SAATb,CAAmBQ,IAAnBR,EAAyBP,EAAzBO,CAVhB,iDAUPc,YAVO,yBAUPA;YACNvB,GAAG,CAACc,IAAJd,CAAS;cACPE,EAAE,EAAFA,EADO;cAEPa,GAAG;cACDQ,YAAY,GAAG,CAAfA;cACI,iCADJA;cAE2CrB,EAF3C,CAHK,EAATF,EAXa;;;;YAoBfC,IAAI,cAAJA,CApBe,2EAAnB;;;;AAwBAN,MAAM,UAANA,CAAc,MAAdA,sHAAsB,kBAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;;YAEdC,EAFc,GAETE,QAAQ,CAACL,GAAG,CAACI,MAAJJ,CAAWG,EAAZ,CAAbA,CAFc;;YAIdG,KAAK,CAACH,EAAD,CAJS;YAKZI,GALY,GAKN,IAAIC,KAAJ,CAAU,oCAAV,CAAND;YACJA,GAAG,CAACE,MAAJF,GAAa,GAAbA,CANgB;cAOVA,GAPU;;cASaG,QAAQ,CAACe,SAATf,CAAmBP,EAAnBO,CATb,iDASVc,YATU,yBASVA;YACNvB,GAAG,CAACc,IAAJd,CAAS;cACPE,EAAE,EAAFA,EADO;cAEPa,GAAG;cACDQ,YAAY,GAAG,CAAfA;cACI,iCADJA;cAE2CrB,EAF3C,CAHK,EAATF,EAVgB;;;;YAmBlBC,IAAI,cAAJA,CAnBkB,2EAAtB,mF;;;;AAuBeN,M","names":["router","express","Router","get","req","res","next","id","params","parseInt","isNaN","err","Error","status","products","findOneById","results","_context","findAll","json","msg","post","body","_context2","createOne","insertId","put","updateOne","affectedRows","deleteOne"],"sources":["../../routes/product.router.js"],"sourcesContent":["import express from \"express\";\r\nimport * as products from \"../controllers/products.controller\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/:id?\", async (req, res, next) => {\r\n  try {\r\n    let { id } = req.params;\r\n    let results;\r\n\r\n    if (id) {\r\n      id = parseInt(id);\r\n\r\n      if (isNaN(id)) {\r\n        let err = new Error(\"ProductID must be of type 'number'\");\r\n        err.status = 400;\r\n        throw err;\r\n      }\r\n\r\n      [results] = await products.findOneById(id);\r\n    } else {\r\n      results = await products.findAll();\r\n    }\r\n\r\n    res.json(results || { msg: `No products found with id: ${id}` });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.post(\"/\", async (req, res, next) => {\r\n  try {\r\n    let { body } = req;\r\n\r\n    let { insertId } = await products.createOne(body);\r\n    res.json({\r\n      id: insertId,\r\n      msg: \"Successfully added product\",\r\n    });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.put(\"/:id\", async (req, res, next) => {\r\n  try {\r\n    let { body } = req;\r\n    let id = parseInt(req.params.id);\r\n\r\n    if (isNaN(id)) {\r\n      let err = new Error(\"ProductID must be of type 'number'\");\r\n      err.status = 400;\r\n      throw err;\r\n    } else {\r\n      let { affectedRows } = await products.updateOne(body, id);\r\n      res.json({\r\n        id,\r\n        msg:\r\n          affectedRows > 0\r\n            ? \"Successfully updated product(s)\"\r\n            : `No product found to update with id: ${id}`,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.delete(\"/:id\", async (req, res, next) => {\r\n  try {\r\n    let id = parseInt(req.params.id);\r\n\r\n    if (isNaN(id)) {\r\n      let err = new Error(\"ProductID must be of type 'number'\");\r\n      err.status = 400;\r\n      throw err;\r\n    } else {\r\n      let { affectedRows } = await products.deleteOne(id);\r\n      res.json({\r\n        id,\r\n        msg:\r\n          affectedRows > 0\r\n            ? \"Successfully deleted product(s)\"\r\n            : `No product found to delete with id: ${id}`,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nexport default router;\r\n"]}